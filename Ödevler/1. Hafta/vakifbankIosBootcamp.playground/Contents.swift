import Foundation

print("------------------------------Soru 1------------------------------")
/*
 Palindrome. Verilen Stringin palindrome olup olmadığını kontrol eden bir fonksiyon yazınız.
 */

func Question1 (_ str: inout String) -> Bool {
    
    var interpunctionMarks = [".", "?", "!", ",", ":", ";", "-", "[", "]", "(", ")", "{", "}","\'", "\"", "...", "/", "\\"]
    
    // Eğer bir sayı girilecek bu değer - ile başlayacak olursa
    if str.first == "-" {
        str.removeFirst()
    }
    
    // Eğer boş bir şey verilecek olursa
    if str == "" || str == " " {
        return false
    }
    
    //boşluk ve cümle arasına gelen noktalama işaretlerini kaldırma
    //let removeSpaces = str.replacingOccurrences(of: " ", with: "")
    var removeStr = ""
    removeStr = str.replacingOccurrences(of: " ", with: "")
    
    for i in interpunctionMarks {
        removeStr = removeStr.replacingOccurrences(of: i, with: "")
    }
    var lowerCase = removeStr.lowercased()
    return lowerCase == String(lowerCase.reversed())
}

// Sayı da girilebilir
// removeFirst() fonksiyonunu kullanmak istediğim için inout kullanmam gerekti. Mutate'den dolayı. Bu sebeple & - Ampersand kullanıyorum.
var Question1Input = "Mer,k?ez: E;m.el'e geleme/z Ekre\\M"
Question1(&Question1Input) ? print("Palindrom") : print("Palindrom değil")

print("------------------------------Soru 2------------------------------")
/*
 Verilen bir array içerisindeki her bir elemanın sayısını veren bir fonksiyon yazınız.
 */

// T tipinde Int, Double, String değerler alabilir.
func Question2<T>(_ arr: inout [T]) -> Dictionary<String, Int> {
    // key, value Dictionary oluşumu.
    var dict: [String:Int] = [String:Int]()
    // Gelen değerleri String'e dönüştürme
    var strArr = arr.map {
        String(describing: $0)
    }
    
    // Her bir element tekrar ediliyorsa value'yi 1 artırma yoksa 0 koyma
    for e in strArr {
        print(e)
        dict[e] = (dict[e] ?? 0) + 1
    }
    return dict
}

var question2v1 = [1,2,2,3,4,5,1,1,2,3,1]
var question2v2 = ["a", "b", "f", "a", "b", "a"]
var question2v3 = [1.1, 2.3, 1.1231, 1.1231, 1.1, 1.1, 4.6, 7.8788]
var deneme = ["a", "b", "a", true, true, "c", 1,2,2,2,2, 3.14] as [Any]
// inout kullanımı ile yine & konuluyor
print(Question2(&deneme))
print("------------------------------Soru 3------------------------------")
/*
 "*" Karakterinden piramit oluşturan fonksiyonu yazınız. Parametre olarak kaç katlı olacağı alınsın.
 */
print("Number of Rows: 5")

func Question3(numberOfRows: Int) {
    if numberOfRows < 0 {
        print("It cannot be less than 0!")
    } else {
        /*for i in 0..<numberOfRows {
         for _ in 0...i {
         print("*", terminator: "")
         }
         print("\n")
         }*/
        
        for i in 0...numberOfRows {
            print(String.init(repeating: "*", count: i))
        }
    }
}

Question3(numberOfRows: 5)

print("------------------------------Soru 4------------------------------")
/*
 Yazdığınız piramit fonksiyonun çıktısını ortalı olacak şekilde yazınız. Örn:
 */
print("Number of Rows: 5")

func Question4(numberOfRows: Int) {
    if numberOfRows < 0 {
        print("It cannot be less than 0!")
        
    } else {
        for i in 0...numberOfRows {
            print(String.init(repeating: " ", count: numberOfRows-i) +
                  String.init(repeating: "*", count: 2*i+1))
        }
    }
}

Question4(numberOfRows: 5)

print("------------------------------Soru 5 - Project Euler 1------------------------------")

/*
 If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
 
 Find the sum of all the multiples of 3 or 5 below 1000.
 */

func Question5A(num: Int) -> String {
    var sum = 0
    for i in 1..<num {
        if i % 3 == 0 || i % 5 == 0 {
            sum += i
        }
    }
    
    return String(describing: sum)
}
print("Soru 5 - Project Euler 1 => \(String(Question5A(num: 1000)))")

print("------------------------------Soru 5 - Project Euler 2------------------------------")
/*
 Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 
 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 
 By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */

func Question5B() -> Int {
    var first = 0
    var second = 1
    var fibo = Int()
    var sum = 0
    
    while second < 4_000_000 {
        fibo = first + second
        first = second
        second = fibo
        
        if second % 2 == 0 {
            sum += second
        }
    }
    
    return sum
}
print("Soru 5 - Project Euler 2 => \(String(Question5B()))")

print("------------------------------Soru 5 - Project Euler 3------------------------------")

/*
 The prime factors of 13195 are 5, 7, 13 and 29.
 
 What is the largest prime factor of the number 600851475143 ?
 */

func Question5C(_ num: Int) -> [Int] {
    if num <= 3 {
        return [num]
    }
    
    var range = Int(sqrt(Double(num)))
    for i in 2...range {
        if num % i == 0 {
            var res = [i]
            res.append(contentsOf: Question5C(num / i))
            return res
        }
    }
    return [num]
}

print("Soru 5 - Project Euler 3 => \(Question5C(600_851_475_143).last!)")
